// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// CheckPrimer
Rcpp::List CheckPrimer(Rcpp::List pr2, Rcpp::StringVector primer1, Rcpp::StringVector primer2, int l_min, int l_max, bool keepPrimer);
RcppExport SEXP _PatPilr_CheckPrimer(SEXP pr2SEXP, SEXP primer1SEXP, SEXP primer2SEXP, SEXP l_minSEXP, SEXP l_maxSEXP, SEXP keepPrimerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type pr2(pr2SEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type primer1(primer1SEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type primer2(primer2SEXP);
    Rcpp::traits::input_parameter< int >::type l_min(l_minSEXP);
    Rcpp::traits::input_parameter< int >::type l_max(l_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type keepPrimer(keepPrimerSEXP);
    rcpp_result_gen = Rcpp::wrap(CheckPrimer(pr2, primer1, primer2, l_min, l_max, keepPrimer));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PatPilr_CheckPrimer", (DL_FUNC) &_PatPilr_CheckPrimer, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_PatPilr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
